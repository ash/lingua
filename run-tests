#!/usr/bin/env raku

my @errors;

test-file($_) for dir('t').sort;

say '-' x 9, ' Summary ', '-' x 9;
if @errors {
    my $n = @errors.elems;
    my $s = $n > 1 ?? 's' !! '';
    say "$n test file$s failed:";
    say "\t$_" for @errors;
}
else {
    say "All tests successfully ran.";
}

sub test-file($file) {
    my $path = $file.path;
    print "$path... ";

    my $proc = run('./lingua', $path, :out, :err);
    my $out = $proc.out.slurp;
    my $err = $proc.err.slurp;

    my $ok = 1;
    if $err ~~ /^Error/ {
        $ok = 0;
    }
    else {
        my $expected = expected($path);
        if $expected ne $out {
            say "\nGOT: $out";
            say "EXPECTED: $expected";
            $ok = 0;
        }
    }

    if $ok {
        say "\e[32mOK\e[39m";
    }
    else {
        say "\e[31mFAIL\e[39m";
        $err ~~ s:g/^^/# /;
        say $err;
        push @errors, $path;
    }
}

sub expected($path) {
    my $expected;
    for $path.IO.lines -> $line {
        $line ~~ /'##'\s*(\N*)/;
        next unless $0;
        $expected ~= "$0\n";
    }

    return $expected;
}
